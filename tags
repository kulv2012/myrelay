!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALIGN_BITS	oplib/src/genpool.c	27;"	d	file:
ALIGN_MASK	oplib/src/genpool.c	29;"	d	file:
ALIGN_SIZE	oplib/src/genpool.c	28;"	d	file:
AUTO_INCREMENT_FLAG	mysql_com.h	93;"	d
BINARY_FLAG	mysql_com.h	89;"	d
BINCMP_FLAG	mysql_com.h	102;"	d
BLOB_FLAG	mysql_com.h	86;"	d
BUFFSIZE	oplib/src/log.c	21;"	d	file:
CC	Makefile	/^CC = gcc$/;"	m
CC	oplib/src/Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -g -I .\/oplib\/include\/ -lpthread$/;"	m
CFLAGS	oplib/src/Makefile	/^CFLAGS = -I ..\/include\/ -g -fPIC$/;"	m
CLIENT_ALL_FLAGS	mysql_com.h	152;"	d
CLIENT_BASIC_FLAGS	mysql_com.h	178;"	d
CLIENT_COMPRESS	mysql_com.h	134;"	d
CLIENT_CONNECT_WITH_DB	mysql_com.h	132;"	d
CLIENT_FOUND_ROWS	mysql_com.h	130;"	d
CLIENT_IGNORE_SIGPIPE	mysql_com.h	141;"	d
CLIENT_IGNORE_SPACE	mysql_com.h	137;"	d
CLIENT_INTERACTIVE	mysql_com.h	139;"	d
CLIENT_LOCAL_FILES	mysql_com.h	136;"	d
CLIENT_LONG_FLAG	mysql_com.h	131;"	d
CLIENT_LONG_PASSWORD	mysql_com.h	129;"	d
CLIENT_MULTI_QUERIES	mysql_com.h	271;"	d
CLIENT_MULTI_RESULTS	mysql_com.h	146;"	d
CLIENT_MULTI_STATEMENTS	mysql_com.h	145;"	d
CLIENT_NO_SCHEMA	mysql_com.h	133;"	d
CLIENT_ODBC	mysql_com.h	135;"	d
CLIENT_PROTOCOL_41	mysql_com.h	138;"	d
CLIENT_REMEMBER_OPTIONS	mysql_com.h	149;"	d
CLIENT_RESERVED	mysql_com.h	143;"	d
CLIENT_SECURE_CONNECTION	mysql_com.h	144;"	d
CLIENT_SSL	mysql_com.h	140;"	d
CLIENT_SSL_VERIFY_SERVER_CERT	mysql_com.h	148;"	d
CLIENT_TRANSACTIONS	mysql_com.h	142;"	d
CLI_COM_IGNORE_OK_PKT_SIZE	my_ops.c	977;"	d	file:
COM_BINLOG_DUMP	mysql_com.h	/^  COM_TIME, COM_DELAYED_INSERT, COM_CHANGE_USER, COM_BINLOG_DUMP,$/;"	e	enum:enum_server_command
COM_CHANGE_USER	mysql_com.h	/^  COM_TIME, COM_DELAYED_INSERT, COM_CHANGE_USER, COM_BINLOG_DUMP,$/;"	e	enum:enum_server_command
COM_CONNECT	mysql_com.h	/^  COM_PROCESS_INFO, COM_CONNECT, COM_PROCESS_KILL, COM_DEBUG, COM_PING,$/;"	e	enum:enum_server_command
COM_CONNECT_OUT	mysql_com.h	/^  COM_TABLE_DUMP, COM_CONNECT_OUT, COM_REGISTER_SLAVE,$/;"	e	enum:enum_server_command
COM_CREATE_DB	mysql_com.h	/^  COM_CREATE_DB, COM_DROP_DB, COM_REFRESH, COM_SHUTDOWN, COM_STATISTICS,$/;"	e	enum:enum_server_command
COM_DAEMON	mysql_com.h	/^  COM_STMT_RESET, COM_SET_OPTION, COM_STMT_FETCH, COM_DAEMON,$/;"	e	enum:enum_server_command
COM_DEBUG	mysql_com.h	/^  COM_PROCESS_INFO, COM_CONNECT, COM_PROCESS_KILL, COM_DEBUG, COM_PING,$/;"	e	enum:enum_server_command
COM_DELAYED_INSERT	mysql_com.h	/^  COM_TIME, COM_DELAYED_INSERT, COM_CHANGE_USER, COM_BINLOG_DUMP,$/;"	e	enum:enum_server_command
COM_DROP_DB	mysql_com.h	/^  COM_CREATE_DB, COM_DROP_DB, COM_REFRESH, COM_SHUTDOWN, COM_STATISTICS,$/;"	e	enum:enum_server_command
COM_END	mysql_com.h	/^  COM_END$/;"	e	enum:enum_server_command
COM_FIELD_LIST	mysql_com.h	/^  COM_SLEEP, COM_QUIT, COM_INIT_DB, COM_QUERY, COM_FIELD_LIST,$/;"	e	enum:enum_server_command
COM_INIT_DB	mysql_com.h	/^  COM_SLEEP, COM_QUIT, COM_INIT_DB, COM_QUERY, COM_FIELD_LIST,$/;"	e	enum:enum_server_command
COM_PING	mysql_com.h	/^  COM_PROCESS_INFO, COM_CONNECT, COM_PROCESS_KILL, COM_DEBUG, COM_PING,$/;"	e	enum:enum_server_command
COM_PROCESS_INFO	mysql_com.h	/^  COM_PROCESS_INFO, COM_CONNECT, COM_PROCESS_KILL, COM_DEBUG, COM_PING,$/;"	e	enum:enum_server_command
COM_PROCESS_KILL	mysql_com.h	/^  COM_PROCESS_INFO, COM_CONNECT, COM_PROCESS_KILL, COM_DEBUG, COM_PING,$/;"	e	enum:enum_server_command
COM_QUERY	mysql_com.h	/^  COM_SLEEP, COM_QUIT, COM_INIT_DB, COM_QUERY, COM_FIELD_LIST,$/;"	e	enum:enum_server_command
COM_QUIT	mysql_com.h	/^  COM_SLEEP, COM_QUIT, COM_INIT_DB, COM_QUERY, COM_FIELD_LIST,$/;"	e	enum:enum_server_command
COM_REFRESH	mysql_com.h	/^  COM_CREATE_DB, COM_DROP_DB, COM_REFRESH, COM_SHUTDOWN, COM_STATISTICS,$/;"	e	enum:enum_server_command
COM_REGISTER_SLAVE	mysql_com.h	/^  COM_TABLE_DUMP, COM_CONNECT_OUT, COM_REGISTER_SLAVE,$/;"	e	enum:enum_server_command
COM_SET_OPTION	mysql_com.h	/^  COM_STMT_RESET, COM_SET_OPTION, COM_STMT_FETCH, COM_DAEMON,$/;"	e	enum:enum_server_command
COM_SHUTDOWN	mysql_com.h	/^  COM_CREATE_DB, COM_DROP_DB, COM_REFRESH, COM_SHUTDOWN, COM_STATISTICS,$/;"	e	enum:enum_server_command
COM_SLEEP	mysql_com.h	/^  COM_SLEEP, COM_QUIT, COM_INIT_DB, COM_QUERY, COM_FIELD_LIST,$/;"	e	enum:enum_server_command
COM_STATISTICS	mysql_com.h	/^  COM_CREATE_DB, COM_DROP_DB, COM_REFRESH, COM_SHUTDOWN, COM_STATISTICS,$/;"	e	enum:enum_server_command
COM_STMT_CLOSE	mysql_com.h	/^  COM_STMT_PREPARE, COM_STMT_EXECUTE, COM_STMT_SEND_LONG_DATA, COM_STMT_CLOSE,$/;"	e	enum:enum_server_command
COM_STMT_EXECUTE	mysql_com.h	/^  COM_STMT_PREPARE, COM_STMT_EXECUTE, COM_STMT_SEND_LONG_DATA, COM_STMT_CLOSE,$/;"	e	enum:enum_server_command
COM_STMT_FETCH	mysql_com.h	/^  COM_STMT_RESET, COM_SET_OPTION, COM_STMT_FETCH, COM_DAEMON,$/;"	e	enum:enum_server_command
COM_STMT_PREPARE	mysql_com.h	/^  COM_STMT_PREPARE, COM_STMT_EXECUTE, COM_STMT_SEND_LONG_DATA, COM_STMT_CLOSE,$/;"	e	enum:enum_server_command
COM_STMT_RESET	mysql_com.h	/^  COM_STMT_RESET, COM_SET_OPTION, COM_STMT_FETCH, COM_DAEMON,$/;"	e	enum:enum_server_command
COM_STMT_SEND_LONG_DATA	mysql_com.h	/^  COM_STMT_PREPARE, COM_STMT_EXECUTE, COM_STMT_SEND_LONG_DATA, COM_STMT_CLOSE,$/;"	e	enum:enum_server_command
COM_TABLE_DUMP	mysql_com.h	/^  COM_TABLE_DUMP, COM_CONNECT_OUT, COM_REGISTER_SLAVE,$/;"	e	enum:enum_server_command
COM_TIME	mysql_com.h	/^  COM_TIME, COM_DELAYED_INSERT, COM_CHANGE_USER, COM_BINLOG_DUMP,$/;"	e	enum:enum_server_command
CONF_FILL_INT	my_conf.c	17;"	d	file:
CONF_FILL_STR	my_conf.c	15;"	d	file:
CURSOR_TYPE_FOR_UPDATE	mysql_com.h	/^  CURSOR_TYPE_FOR_UPDATE= 2,$/;"	e	enum:enum_cursor_type
CURSOR_TYPE_NO_CURSOR	mysql_com.h	/^  CURSOR_TYPE_NO_CURSOR= 0,$/;"	e	enum:enum_cursor_type
CURSOR_TYPE_READ_ONLY	mysql_com.h	/^  CURSOR_TYPE_READ_ONLY= 1,$/;"	e	enum:enum_cursor_type
CURSOR_TYPE_SCROLLABLE	mysql_com.h	/^  CURSOR_TYPE_SCROLLABLE= 4$/;"	e	enum:enum_cursor_type
Computed	sha1.h	/^  int Computed;			\/* Is the digest computed?	   *\/$/;"	m	struct:SHA1_CONTEXT
Corrupted	sha1.h	/^  int Corrupted;		\/* Is the message digest corrupted? *\/$/;"	m	struct:SHA1_CONTEXT
ENUM_FLAG	mysql_com.h	92;"	d
F	oplib/src/md5.c	46;"	d	file:
FF	oplib/src/md5.c	53;"	d	file:
FIELD_IN_ADD_INDEX	mysql_com.h	105;"	d
FIELD_IN_PART_FUNC_FLAG	mysql_com.h	104;"	d
FIELD_IS_RENAMED	mysql_com.h	106;"	d
FIELD_TYPE_BIT	mysql_com.h	299;"	d
FIELD_TYPE_BLOB	mysql_com.h	293;"	d
FIELD_TYPE_CHAR	mysql_com.h	296;"	d
FIELD_TYPE_DATE	mysql_com.h	283;"	d
FIELD_TYPE_DATETIME	mysql_com.h	285;"	d
FIELD_TYPE_DECIMAL	mysql_com.h	272;"	d
FIELD_TYPE_DOUBLE	mysql_com.h	278;"	d
FIELD_TYPE_ENUM	mysql_com.h	288;"	d
FIELD_TYPE_FLOAT	mysql_com.h	277;"	d
FIELD_TYPE_GEOMETRY	mysql_com.h	298;"	d
FIELD_TYPE_INT24	mysql_com.h	282;"	d
FIELD_TYPE_INTERVAL	mysql_com.h	297;"	d
FIELD_TYPE_LONG	mysql_com.h	276;"	d
FIELD_TYPE_LONGLONG	mysql_com.h	281;"	d
FIELD_TYPE_LONG_BLOB	mysql_com.h	292;"	d
FIELD_TYPE_MEDIUM_BLOB	mysql_com.h	291;"	d
FIELD_TYPE_NEWDATE	mysql_com.h	287;"	d
FIELD_TYPE_NEWDECIMAL	mysql_com.h	273;"	d
FIELD_TYPE_NULL	mysql_com.h	279;"	d
FIELD_TYPE_SET	mysql_com.h	289;"	d
FIELD_TYPE_SHORT	mysql_com.h	275;"	d
FIELD_TYPE_STRING	mysql_com.h	295;"	d
FIELD_TYPE_TIME	mysql_com.h	284;"	d
FIELD_TYPE_TIMESTAMP	mysql_com.h	280;"	d
FIELD_TYPE_TINY	mysql_com.h	274;"	d
FIELD_TYPE_TINY_BLOB	mysql_com.h	290;"	d
FIELD_TYPE_VAR_STRING	mysql_com.h	294;"	d
FIELD_TYPE_YEAR	mysql_com.h	286;"	d
G	oplib/src/md5.c	47;"	d	file:
G1	my_protocol.c	/^static inline uint8_t G1(char **ptr)$/;"	f	file:
G2	my_protocol.c	/^static inline uint16_t G2(char **ptr)$/;"	f	file:
G3	my_protocol.c	/^static inline uint32_t G3(char **ptr)$/;"	f	file:
G4	my_protocol.c	/^static inline uint32_t G4(char **ptr)$/;"	f	file:
GET_FIXED_FIELDS_FLAG	mysql_com.h	103;"	d
GG	oplib/src/md5.c	58;"	d	file:
GROUP_FLAG	mysql_com.h	100;"	d
H	oplib/src/md5.c	48;"	d	file:
HEADER_SIZE	my_buf.h	7;"	d
HH	oplib/src/md5.c	63;"	d	file:
HOSTNAME_LENGTH	mysql_com.h	23;"	d
I	oplib/src/md5.c	49;"	d	file:
II	oplib/src/md5.c	68;"	d	file:
INIT_LIST_HEAD	oplib/include/list.h	/^static inline void INIT_LIST_HEAD(struct list_head *list)$/;"	f
Intermediate_Hash	sha1.h	/^  uint32_t Intermediate_Hash[SHA1_HASH_SIZE\/4]; \/* Message Digest  *\/$/;"	m	struct:SHA1_CONTEXT
K	sha1.c	/^static const uint32_t  K[]=$/;"	v	file:
KILL_CONNECTION	mysql_com.h	/^  KILL_CONNECTION= 255$/;"	e	enum:mysql_enum_shutdown_level
KILL_QUERY	mysql_com.h	/^  KILL_QUERY= 254,$/;"	e	enum:mysql_enum_shutdown_level
LIST_HEAD	oplib/include/list.h	20;"	d
LIST_HEAD_INIT	oplib/include/list.h	18;"	d
LOCAL_HOST	mysql_com.h	41;"	d
LOCAL_HOST_NAMEDPIPE	mysql_com.h	42;"	d
LOG_LEVEL_DEBUG	oplib/include/log.h	/^    LOG_LEVEL_DEBUG$/;"	e	enum:__anon15
LOG_LEVEL_ERR	oplib/include/log.h	/^    LOG_LEVEL_ERR,$/;"	e	enum:__anon15
LOG_LEVEL_INFO	oplib/include/log.h	/^    LOG_LEVEL_INFO,$/;"	e	enum:__anon15
LOG_LEVEL_LOG	oplib/include/log.h	/^    LOG_LEVEL_LOG,$/;"	e	enum:__anon15
LOG_NONE	oplib/include/log.h	/^    LOG_NONE = 0,$/;"	e	enum:__anon15
LOG_WITHOUT_STRERROR	oplib/include/log.h	/^    LOG_WITHOUT_STRERROR = 0,$/;"	e	enum:__anon14
LOG_WITH_STRERROR	oplib/include/log.h	/^    LOG_WITH_STRERROR$/;"	e	enum:__anon14
Length	sha1.h	/^  uint64_t Length;		\/* Message length in bits      *\/$/;"	m	struct:SHA1_CONTEXT
MAGICNUM	oplib/src/genpool.c	21;"	d	file:
MAX_BIGINT_WIDTH	mysql_com.h	242;"	d
MAX_BLOB_WIDTH	mysql_com.h	244;"	d
MAX_CHAR_WIDTH	mysql_com.h	243;"	d
MAX_EVENT	oplib/include/handler.h	19;"	d
MAX_FREE_CHUNKS	oplib/src/genpool.c	24;"	d	file:
MAX_FUNC_MAP	oplib/src/timer.c	23;"	d	file:
MAX_HASH_BUCKET	oplib/src/conf.c	21;"	d	file:
MAX_HOST_LEN	def.h	6;"	d
MAX_INT_WIDTH	mysql_com.h	241;"	d
MAX_KEY_LEN	oplib/src/conf.c	22;"	d	file:
MAX_LINE_LEN	my_conf.c	65;"	d	file:
MAX_LINE_LEN	oplib/src/conf.c	20;"	d	file:
MAX_MASTER_NODE	def.h	11;"	d
MAX_MEDIUMINT_WIDTH	mysql_com.h	240;"	d
MAX_PASS_LEN	def.h	9;"	d
MAX_SLAVE_NODE	def.h	10;"	d
MAX_SMALLINT_WIDTH	mysql_com.h	239;"	d
MAX_SRV_LEN	def.h	7;"	d
MAX_TINYINT_WIDTH	mysql_com.h	238;"	d
MAX_USER_LEN	def.h	8;"	d
MAX_VALUE_LEN	oplib/src/conf.c	23;"	d	file:
MULTIPLE_KEY_FLAG	mysql_com.h	85;"	d
MYSQL_ERRMSG_SIZE	mysql_com.h	227;"	d
MYSQL_NAMEDPIPE	mysql_com.h	46;"	d
MYSQL_OPTION_MULTI_STATEMENTS_OFF	mysql_com.h	/^  MYSQL_OPTION_MULTI_STATEMENTS_OFF$/;"	e	enum:enum_mysql_set_option
MYSQL_OPTION_MULTI_STATEMENTS_ON	mysql_com.h	/^  MYSQL_OPTION_MULTI_STATEMENTS_ON,$/;"	e	enum:enum_mysql_set_option
MYSQL_SERVICENAME	mysql_com.h	47;"	d
MYSQL_SHUTDOWN_KILLABLE_CONNECT	mysql_com.h	305;"	d
MYSQL_SHUTDOWN_KILLABLE_LOCK_TABLE	mysql_com.h	307;"	d
MYSQL_SHUTDOWN_KILLABLE_TRANS	mysql_com.h	306;"	d
MYSQL_SHUTDOWN_KILLABLE_UPDATE	mysql_com.h	308;"	d
MYSQL_TYPE_BIT	mysql_com.h	/^			MYSQL_TYPE_BIT,$/;"	e	enum:enum_field_types
MYSQL_TYPE_BLOB	mysql_com.h	/^			MYSQL_TYPE_BLOB=252,$/;"	e	enum:enum_field_types
MYSQL_TYPE_DATE	mysql_com.h	/^			MYSQL_TYPE_DATE,   MYSQL_TYPE_TIME,$/;"	e	enum:enum_field_types
MYSQL_TYPE_DATETIME	mysql_com.h	/^			MYSQL_TYPE_DATETIME, MYSQL_TYPE_YEAR,$/;"	e	enum:enum_field_types
MYSQL_TYPE_DECIMAL	mysql_com.h	/^enum enum_field_types { MYSQL_TYPE_DECIMAL, MYSQL_TYPE_TINY,$/;"	e	enum:enum_field_types
MYSQL_TYPE_DOUBLE	mysql_com.h	/^			MYSQL_TYPE_FLOAT,  MYSQL_TYPE_DOUBLE,$/;"	e	enum:enum_field_types
MYSQL_TYPE_ENUM	mysql_com.h	/^			MYSQL_TYPE_ENUM=247,$/;"	e	enum:enum_field_types
MYSQL_TYPE_FLOAT	mysql_com.h	/^			MYSQL_TYPE_FLOAT,  MYSQL_TYPE_DOUBLE,$/;"	e	enum:enum_field_types
MYSQL_TYPE_GEOMETRY	mysql_com.h	/^			MYSQL_TYPE_GEOMETRY=255$/;"	e	enum:enum_field_types
MYSQL_TYPE_INT24	mysql_com.h	/^			MYSQL_TYPE_LONGLONG,MYSQL_TYPE_INT24,$/;"	e	enum:enum_field_types
MYSQL_TYPE_LONG	mysql_com.h	/^			MYSQL_TYPE_SHORT,  MYSQL_TYPE_LONG,$/;"	e	enum:enum_field_types
MYSQL_TYPE_LONGLONG	mysql_com.h	/^			MYSQL_TYPE_LONGLONG,MYSQL_TYPE_INT24,$/;"	e	enum:enum_field_types
MYSQL_TYPE_LONG_BLOB	mysql_com.h	/^			MYSQL_TYPE_LONG_BLOB=251,$/;"	e	enum:enum_field_types
MYSQL_TYPE_MEDIUM_BLOB	mysql_com.h	/^			MYSQL_TYPE_MEDIUM_BLOB=250,$/;"	e	enum:enum_field_types
MYSQL_TYPE_NEWDATE	mysql_com.h	/^			MYSQL_TYPE_NEWDATE, MYSQL_TYPE_VARCHAR,$/;"	e	enum:enum_field_types
MYSQL_TYPE_NEWDECIMAL	mysql_com.h	/^                        MYSQL_TYPE_NEWDECIMAL=246,$/;"	e	enum:enum_field_types
MYSQL_TYPE_NULL	mysql_com.h	/^			MYSQL_TYPE_NULL,   MYSQL_TYPE_TIMESTAMP,$/;"	e	enum:enum_field_types
MYSQL_TYPE_SET	mysql_com.h	/^			MYSQL_TYPE_SET=248,$/;"	e	enum:enum_field_types
MYSQL_TYPE_SHORT	mysql_com.h	/^			MYSQL_TYPE_SHORT,  MYSQL_TYPE_LONG,$/;"	e	enum:enum_field_types
MYSQL_TYPE_STRING	mysql_com.h	/^			MYSQL_TYPE_STRING=254,$/;"	e	enum:enum_field_types
MYSQL_TYPE_TIME	mysql_com.h	/^			MYSQL_TYPE_DATE,   MYSQL_TYPE_TIME,$/;"	e	enum:enum_field_types
MYSQL_TYPE_TIMESTAMP	mysql_com.h	/^			MYSQL_TYPE_NULL,   MYSQL_TYPE_TIMESTAMP,$/;"	e	enum:enum_field_types
MYSQL_TYPE_TINY	mysql_com.h	/^enum enum_field_types { MYSQL_TYPE_DECIMAL, MYSQL_TYPE_TINY,$/;"	e	enum:enum_field_types
MYSQL_TYPE_TINY_BLOB	mysql_com.h	/^			MYSQL_TYPE_TINY_BLOB=249,$/;"	e	enum:enum_field_types
MYSQL_TYPE_VARCHAR	mysql_com.h	/^			MYSQL_TYPE_NEWDATE, MYSQL_TYPE_VARCHAR,$/;"	e	enum:enum_field_types
MYSQL_TYPE_VAR_STRING	mysql_com.h	/^			MYSQL_TYPE_VAR_STRING=253,$/;"	e	enum:enum_field_types
MYSQL_TYPE_YEAR	mysql_com.h	/^			MYSQL_TYPE_DATETIME, MYSQL_TYPE_YEAR,$/;"	e	enum:enum_field_types
MY_NODE_CLOSING_DELAY	def.h	4;"	d
Message_Block	sha1.h	/^  uint8_t Message_Block[64];	\/* 512-bit message blocks      *\/$/;"	m	struct:SHA1_CONTEXT
Message_Block_Index	sha1.h	/^  int16_t Message_Block_Index;	\/* Index into message block array   *\/$/;"	m	struct:SHA1_CONTEXT
NAME_CHAR_LEN	mysql_com.h	25;"	d
NAME_LEN	mysql_com.h	27;"	d
NET_READ_TIMEOUT	mysql_com.h	228;"	d
NET_WAIT_TIMEOUT	mysql_com.h	230;"	d
NET_WRITE_TIMEOUT	mysql_com.h	229;"	d
NOT_NULL_FLAG	mysql_com.h	82;"	d
NO_DEFAULT_VALUE_FLAG	mysql_com.h	96;"	d
NUM_FLAG	mysql_com.h	98;"	d
OBJECT	Makefile	/^OBJECT = cli_pool.o conn_pool.o main.o my_buf.o my_ops.o my_pool.o work.o my_protocol.o sqldump.o passwd.o sha1.o my_conf.o$/;"	m
OBJECT	oplib/src/Makefile	/^OBJECT = common.o conf.o dict.o genpool.o handler.o hash.o iprange.o log.o md5.o sock.o timer.o$/;"	m
ONLY_KILL_QUERY	mysql_com.h	232;"	d
ON_UPDATE_NOW_FLAG	mysql_com.h	97;"	d
PAGES_PER_CHUNK	oplib/src/genpool.c	23;"	d	file:
PART_KEY_FLAG	mysql_com.h	99;"	d
PASSWORD_TYPE	my_protocol.h	71;"	d
PREALLOC_BUF_SIZE	my_buf.h	6;"	d
PREALLOC_CHUNKS	oplib/src/genpool.c	25;"	d	file:
PRI_KEY_FLAG	mysql_com.h	83;"	d
REFRESH_DES_KEY_FILE	mysql_com.h	126;"	d
REFRESH_FAST	mysql_com.h	121;"	d
REFRESH_GRANT	mysql_com.h	108;"	d
REFRESH_HOSTS	mysql_com.h	111;"	d
REFRESH_LOG	mysql_com.h	109;"	d
REFRESH_MASTER	mysql_com.h	116;"	d
REFRESH_QUERY_CACHE	mysql_com.h	124;"	d
REFRESH_QUERY_CACHE_FREE	mysql_com.h	125;"	d
REFRESH_READ_LOCK	mysql_com.h	120;"	d
REFRESH_SLAVE	mysql_com.h	114;"	d
REFRESH_STATUS	mysql_com.h	112;"	d
REFRESH_TABLES	mysql_com.h	110;"	d
REFRESH_THREADS	mysql_com.h	113;"	d
REFRESH_USER_RESOURCES	mysql_com.h	127;"	d
RESERVE_FOR_HEADER	oplib/src/sock.c	26;"	d	file:
ROTATE_LEFT	oplib/src/md5.c	51;"	d	file:
S1	my_protocol.c	/^static inline void S1(char **ptr, uint8_t u)$/;"	f	file:
S11	oplib/src/md5.c	23;"	d	file:
S12	oplib/src/md5.c	24;"	d	file:
S13	oplib/src/md5.c	25;"	d	file:
S14	oplib/src/md5.c	26;"	d	file:
S2	my_protocol.c	/^static inline void S2(char **ptr, uint16_t u)$/;"	f	file:
S21	oplib/src/md5.c	27;"	d	file:
S22	oplib/src/md5.c	28;"	d	file:
S23	oplib/src/md5.c	29;"	d	file:
S24	oplib/src/md5.c	30;"	d	file:
S3	my_protocol.c	/^static inline void S3(char **ptr, uint32_t u)$/;"	f	file:
S31	oplib/src/md5.c	31;"	d	file:
S32	oplib/src/md5.c	32;"	d	file:
S33	oplib/src/md5.c	33;"	d	file:
S34	oplib/src/md5.c	34;"	d	file:
S4	my_protocol.c	/^static inline void S4(char **ptr, uint32_t u)$/;"	f	file:
S41	oplib/src/md5.c	35;"	d	file:
S42	oplib/src/md5.c	36;"	d	file:
S43	oplib/src/md5.c	37;"	d	file:
S44	oplib/src/md5.c	38;"	d	file:
SCRAMBLED_PASSWORD_CHAR_LENGTH	mysql_com.h	78;"	d
SCRAMBLED_PASSWORD_CHAR_LENGTH_323	mysql_com.h	79;"	d
SCRAMBLE_LENGTH	mysql_com.h	75;"	d
SCRAMBLE_LENGTH_323	mysql_com.h	76;"	d
SERVER_MORE_RESULTS_EXISTS	mysql_com.h	191;"	d
SERVER_QUERY_NO_GOOD_INDEX_USED	mysql_com.h	192;"	d
SERVER_QUERY_NO_INDEX_USED	mysql_com.h	193;"	d
SERVER_STATUS_AUTOCOMMIT	mysql_com.h	190;"	d
SERVER_STATUS_CLEAR_SET	mysql_com.h	222;"	d
SERVER_STATUS_CURSOR_EXISTS	mysql_com.h	199;"	d
SERVER_STATUS_DB_DROPPED	mysql_com.h	205;"	d
SERVER_STATUS_IN_TRANS	mysql_com.h	189;"	d
SERVER_STATUS_LAST_ROW_SENT	mysql_com.h	204;"	d
SERVER_STATUS_METADATA_CHANGED	mysql_com.h	212;"	d
SERVER_STATUS_NO_BACKSLASH_ESCAPES	mysql_com.h	206;"	d
SERVER_VERSION_LENGTH	mysql_com.h	30;"	d
SET_FLAG	mysql_com.h	95;"	d
SHA1CircularShift	sha1.c	59;"	d	file:
SHA1PadMessage	sha1.c	/^static void SHA1PadMessage(SHA1_CONTEXT *context)$/;"	f	file:
SHA1ProcessMessageBlock	sha1.c	/^static void SHA1ProcessMessageBlock(SHA1_CONTEXT *context)$/;"	f	file:
SHA1_CONTEXT	sha1.h	/^typedef struct SHA1_CONTEXT$/;"	s
SHA1_CONTEXT	sha1.h	/^} SHA1_CONTEXT;$/;"	t	typeref:struct:SHA1_CONTEXT
SHA1_H	sha1.h	31;"	d
SHA1_HASH_SIZE	sha1.h	44;"	d
SHA_INPUT_TOO_LONG	sha1.h	/^  SHA_INPUT_TOO_LONG,	\/* input data too long *\/$/;"	e	enum:sha_result_codes
SHA_NULL	sha1.h	/^  SHA_NULL,		\/* Null pointer parameter *\/$/;"	e	enum:sha_result_codes
SHA_STATE_ERROR	sha1.h	/^  SHA_STATE_ERROR	\/* called Input after Result *\/$/;"	e	enum:sha_result_codes
SHA_SUCCESS	sha1.h	/^  SHA_SUCCESS = 0,$/;"	e	enum:sha_result_codes
SHUTDOWN_DEFAULT	mysql_com.h	/^  SHUTDOWN_DEFAULT = 0,$/;"	e	enum:mysql_enum_shutdown_level
SHUTDOWN_WAIT_ALL_BUFFERS	mysql_com.h	/^  SHUTDOWN_WAIT_ALL_BUFFERS= (MYSQL_SHUTDOWN_KILLABLE_UPDATE << 1),$/;"	e	enum:mysql_enum_shutdown_level
SHUTDOWN_WAIT_CONNECTIONS	mysql_com.h	/^  SHUTDOWN_WAIT_CONNECTIONS= MYSQL_SHUTDOWN_KILLABLE_CONNECT,$/;"	e	enum:mysql_enum_shutdown_level
SHUTDOWN_WAIT_CRITICAL_BUFFERS	mysql_com.h	/^  SHUTDOWN_WAIT_CRITICAL_BUFFERS= (MYSQL_SHUTDOWN_KILLABLE_UPDATE << 1) + 1,$/;"	e	enum:mysql_enum_shutdown_level
SHUTDOWN_WAIT_TRANSACTIONS	mysql_com.h	/^  SHUTDOWN_WAIT_TRANSACTIONS= MYSQL_SHUTDOWN_KILLABLE_TRANS,$/;"	e	enum:mysql_enum_shutdown_level
SHUTDOWN_WAIT_UPDATES	mysql_com.h	/^  SHUTDOWN_WAIT_UPDATES= MYSQL_SHUTDOWN_KILLABLE_UPDATE,$/;"	e	enum:mysql_enum_shutdown_level
SQLSTATE_LENGTH	mysql_com.h	31;"	d
STATE_AUTH_FAIL	conn_pool.h	/^    STATE_AUTH_FAIL,$/;"	e	enum:__anon6
STATE_AUTH_SUCCESS	conn_pool.h	/^    STATE_AUTH_SUCCESS,$/;"	e	enum:__anon6
STATE_IDLE	conn_pool.h	/^    STATE_IDLE$/;"	e	enum:__anon6
STATE_PREPARE_MYSQL	conn_pool.h	/^    STATE_PREPARE_MYSQL,$/;"	e	enum:__anon6
STATE_READING_CLIENT	conn_pool.h	/^    STATE_READING_CLIENT,$/;"	e	enum:__anon6
STATE_READ_MYSQL_WRITE_CLIENT	conn_pool.h	/^    STATE_READ_MYSQL_WRITE_CLIENT,$/;"	e	enum:__anon6
STATE_UNAVAIL	conn_pool.h	/^    STATE_UNAVAIL = 0,$/;"	e	enum:__anon6
STATE_WRITING_MYSQL	conn_pool.h	/^    STATE_WRITING_MYSQL,$/;"	e	enum:__anon6
SYSTEM_CHARSET_MBMAXLEN	mysql_com.h	24;"	d
TIMESTAMP_FLAG	mysql_com.h	94;"	d
UNIQUE_FLAG	mysql_com.h	101;"	d
UNIQUE_KEY_FLAG	mysql_com.h	84;"	d
UNSIGNED_FLAG	mysql_com.h	87;"	d
USAGE	main.c	37;"	d	file:
USERNAME_CHAR_LENGTH	mysql_com.h	26;"	d
USERNAME_LENGTH	mysql_com.h	28;"	d
USER_HOST_BUFF_SIZE	mysql_com.h	39;"	d
VERSION	main.c	24;"	d	file:
Vio	mysql_com.h	/^typedef struct st_vio Vio;$/;"	t	typeref:struct:st_vio
ZEROFILL_FLAG	mysql_com.h	88;"	d
_CLI_POOL_H_	cli_pool.h	2;"	d
_COMMON_H_	oplib/include/common.h	2;"	d
_CONF_H_	oplib/include/conf.h	2;"	d
_DEF_H_	def.h	2;"	d
_GENPOOL_H_	oplib/include/genpool.h	2;"	d
_HANDLER_H_	oplib/include/handler.h	2;"	d
_HASH_H_	oplib/include/hash.h	2;"	d
_IPRANGE_H_	oplib/include/iprange.h	2;"	d
_MD5_H_	oplib/include/md5.h	20;"	d
_MY_BUF_H_	my_buf.h	2;"	d
_MY_CONF_H_	my_conf.h	2;"	d
_MY_OPS_H_	my_ops.h	2;"	d
_MY_POOL_H_	my_pool.h	2;"	d
_MY_PROTOCOL_H_	my_protocol.h	2;"	d
_PASSWD_H_	passwd.h	2;"	d
_SOCK_H_	oplib/include/sock.h	2;"	d
_SQLDUMP_H_	sqldump.h	2;"	d
_TIMER_H_	oplib/include/timer.h	2;"	d
__CONN_POOL_H_	conn_pool.h	2;"	d
__DICT_H_	oplib/include/dict.h	2;"	d
__LIST_H	oplib/include/list.h	2;"	d
__LOG_H_	oplib/include/log.h	2;"	d
__list_add	oplib/include/list.h	/^static inline void __list_add(struct list_head *new,$/;"	f
__list_del	oplib/include/list.h	/^static inline void __list_del(struct list_head * prev, struct list_head * next)$/;"	f
__list_for_each	oplib/include/list.h	256;"	d
__list_splice	oplib/include/list.h	/^static inline void __list_splice(struct list_head *list,$/;"	f
_alloc_a_chunk	oplib/src/genpool.c	/^static int _alloc_a_chunk(genpool_handler_t *g)$/;"	f	file:
_conn_state_timeout_timer	conn_pool.c	/^_conn_state_timeout_timer(unsigned long arg, \\$/;"	f	file:
_free_a_chunk	oplib/src/genpool.c	/^void _free_a_chunk( genpool_handler_t *gpool, struct list_head *head){$/;"	f
_genpool_handler_t	oplib/include/genpool.h	/^typedef struct _genpool_handler_t{$/;"	s
_ipblock	oplib/include/iprange.h	/^typedef struct _ipblock{$/;"	s
_iprange_t	oplib/include/iprange.h	/^typedef struct _iprange_t{$/;"	s
_log_t	oplib/include/log.h	/^typedef struct _log_t{$/;"	s
_md5ctx	oplib/include/md5.h	/^typedef struct _md5ctx {$/;"	s
_my_reg	my_pool.c	/^static int _my_reg(my_node_t *node, char *host, char *srv, char *user, char *pass, int mincount, int maxcount )$/;"	f	file:
_mysql_com_h	mysql_com.h	21;"	d
_release_a_chunk	oplib/src/genpool.c	/^static int _release_a_chunk(genpool_handler_t *g, chunk_t *c)$/;"	f	file:
accept_client	oplib/src/sock.c	/^inline int accept_client(int sockfd, struct sockaddr_in *cliaddr, socklen_t *len)$/;"	f
accept_client_cb	work.c	/^static int accept_client_cb(int listenfd, void *arg)$/;"	f	file:
add_handler	oplib/src/handler.c	/^int add_handler(int fd, uint32_t event, void *cb, void *arg)$/;"	f
arg	conn_pool.h	/^    char arg[1024];$/;"	m	struct:__anon7
arg	my_protocol.h	/^    char arg[4096];$/;"	m	struct:__anon12
arg	oplib/src/handler.c	/^    void *arg;$/;"	m	struct:__anon18	file:
arg	oplib/src/timer.c	/^    unsigned long arg;$/;"	m	struct:timer_func_map	file:
array	oplib/include/iprange.h	/^    ipblock *array;$/;"	m	struct:_iprange_t
attr	oplib/include/dict.h	/^    unsigned long   attr;$/;"	m	struct:dict
avail	my_pool.h	/^    int avail;$/;"	m	struct:__anon3
avail_count	my_pool.h	/^    unsigned int avail_count;\/\/这个机器的可用mysql连接数目$/;"	m	struct:__anon4
avail_head	my_pool.h	/^    struct list_head avail_head;\/\/成功建立连接，并且空闲可用的mysql连接$/;"	m	struct:__anon4	typeref:struct:__anon4::list_head
belong_chunk	oplib/src/genpool.c	/^    chunk_t *belong_chunk;$/;"	m	struct:__anon17	file:
buf	cli_pool.h	/^    buf_t buf;$/;"	m	struct:__anon8
buf	conn_pool.h	/^    buf_t buf;$/;"	m	struct:__anon7
buf	my_pool.h	/^    buf_t buf;$/;"	m	struct:__anon2
buf_init	my_buf.c	/^int buf_init(buf_t *buf)$/;"	f
buf_realloc	my_buf.c	/^buf_t *buf_realloc(buf_t *buf, size_t size)$/;"	f
buf_reset	my_buf.c	/^int buf_reset(buf_t *buf)$/;"	f
buf_rewind	my_buf.c	/^int buf_rewind(buf_t *buf)$/;"	f
buf_t	my_buf.h	/^typedef struct buf_t{$/;"	s
buf_t	my_buf.h	/^}buf_t;$/;"	t	typeref:struct:buf_t
buffer	oplib/include/md5.h	/^	uint8_t buffer[64];$/;"	m	struct:_md5ctx
callback	oplib/src/handler.c	/^    cb_func *callback;$/;"	m	struct:__anon18	file:
cap	my_pool.h	/^    uint32_t cap;$/;"	m	struct:__anon3
cap	my_protocol.h	/^    uint32_t cap;$/;"	m	struct:__anon9
cap_umask	my_ops.c	/^static uint32_t cap_umask = CLIENT_FOUND_ROWS | CLIENT_NO_SCHEMA | \\$/;"	v	file:
cb_func	oplib/src/handler.c	/^typedef int (cb_func)(int fd, void *arg);$/;"	t	file:
charset	my_protocol.h	/^    uint8_t charset;$/;"	m	struct:__anon10
chunk_addr	oplib/src/genpool.c	/^    void *chunk_addr;$/;"	m	struct:__anon16	file:
chunk_t	oplib/src/genpool.c	/^} chunk_t;$/;"	t	typeref:struct:__anon16	file:
cli	conn_pool.h	/^    void *cli;\/\/对应这个连接结构的客户端连接 $/;"	m	struct:__anon7
cli_answer_cb	my_ops.c	/^int cli_answer_cb(int fd, void *arg)$/;"	f
cli_auth_login_t	my_protocol.h	/^}cli_auth_login_t;$/;"	t	typeref:struct:__anon10
cli_com_forward	my_ops.c	/^static int cli_com_forward(conn_t *c)$/;"	f	file:
cli_com_ignored	my_ops.c	/^static int cli_com_ignored(conn_t *c)$/;"	f	file:
cli_com_ok_write_cb	my_ops.c	/^static int cli_com_ok_write_cb(int fd, void *arg)$/;"	f	file:
cli_com_t	my_protocol.h	/^}cli_com_t;$/;"	t	typeref:struct:__anon12
cli_com_unsupported	my_ops.c	/^static int cli_com_unsupported(conn_t *c)$/;"	f	file:
cli_conn_alloc	cli_pool.c	/^cli_conn_alloc(conn_t *conn, int fd, uint32_t ip, uint16_t port)$/;"	f	file:
cli_conn_close	cli_pool.c	/^int cli_conn_close(cli_conn_t *conn)$/;"	f
cli_conn_open	cli_pool.c	/^int cli_conn_open(conn_t *conn, int fd, uint32_t ip, uint16_t port)$/;"	f
cli_conn_release	cli_pool.c	/^static int cli_conn_release(cli_conn_t *conn)$/;"	f	file:
cli_conn_t	cli_pool.h	/^} cli_conn_t;$/;"	t	typeref:struct:__anon8
cli_hs_auth_fail_cb	my_ops.c	/^static int cli_hs_auth_fail_cb(int fd, void *arg)$/;"	f	file:
cli_hs_stage1_cb	my_ops.c	/^int cli_hs_stage1_cb(int fd, void *arg)$/;"	f
cli_hs_stage1_prepare	my_ops.c	/^int cli_hs_stage1_prepare(conn_t *c)$/;"	f
cli_hs_stage2_cb	my_ops.c	/^int cli_hs_stage2_cb(int fd, void *arg)$/;"	f
cli_hs_stage3_cb	my_ops.c	/^int cli_hs_stage3_cb(int fd, void *arg)$/;"	f
cli_pool	cli_pool.c	/^static genpool_handler_t *cli_pool;$/;"	v	file:
cli_pool_destroy	cli_pool.c	/^int cli_pool_destroy( )$/;"	f
cli_pool_init	cli_pool.c	/^int cli_pool_init(int count)$/;"	f
cli_query_cb	my_ops.c	/^int cli_query_cb(int fd, void *arg)$/;"	f
client_flags	my_protocol.h	/^    uint32_t client_flags;$/;"	m	struct:__anon10
closing	my_pool.h	/^    int closing;$/;"	m	struct:__anon4
closing_time	my_pool.h	/^    time_t closing_time;$/;"	m	struct:__anon4
cmp	oplib/include/dict.h	/^    int             (*cmp)(void *, void *);$/;"	m	struct:dict
cnum	my_conf.h	/^    int  cnum;$/;"	m	struct:__anon19
comno	conn_pool.h	/^    uint8_t comno;$/;"	m	struct:__anon7
comno	my_protocol.h	/^    uint8_t comno;$/;"	m	struct:__anon12
conf_def_daemon	my_conf.h	4;"	d
conf_def_idle_timeout	my_conf.h	15;"	d
conf_def_ip	my_conf.h	8;"	d
conf_def_log	my_conf.h	23;"	d
conf_def_loglevel	my_conf.h	24;"	d
conf_def_max_connections	my_conf.h	6;"	d
conf_def_mysql_conf	my_conf.h	21;"	d
conf_def_mysql_ping_timeout	my_conf.h	16;"	d
conf_def_passwd	my_conf.h	19;"	d
conf_def_port	my_conf.h	9;"	d
conf_def_prepare_mysql_timeout	my_conf.h	14;"	d
conf_def_read_client_timeout	my_conf.h	11;"	d
conf_def_read_mysql_write_client_timeout	my_conf.h	13;"	d
conf_def_sqllog	my_conf.h	25;"	d
conf_def_user	my_conf.h	18;"	d
conf_def_worker	my_conf.h	5;"	d
conf_def_write_mysql_timeout	my_conf.h	12;"	d
conf_destroy	oplib/src/conf.c	/^void conf_destroy(){$/;"	f
conf_get	oplib/src/conf.c	/^static char *conf_get(const char *var)$/;"	f	file:
conf_init	oplib/src/conf.c	/^int conf_init(const char *conf)$/;"	f
conf_t	my_conf.h	/^struct conf_t{$/;"	s
conn	cli_pool.h	/^    conn_t *conn;\/\/这个客户端连接对应的中间连接结构为conn_t, 这样可以进一步找到mysql连接$/;"	m	struct:__anon8
conn	my_pool.h	/^    void *conn;$/;"	m	struct:__anon2
conn_alloc	conn_pool.c	/^static conn_t *conn_alloc(void)$/;"	f	file:
conn_alloc_my_conn	conn_pool.c	/^int conn_alloc_my_conn(conn_t *c)$/;"	f
conn_close	conn_pool.c	/^int conn_close(conn_t *c)$/;"	f
conn_close_with_my	conn_pool.c	/^int conn_close_with_my(conn_t *c)$/;"	f
conn_init	conn_pool.c	/^static int conn_init(conn_t *c)$/;"	f	file:
conn_open	conn_pool.c	/^conn_t *conn_open(int fd, uint32_t ip, uint16_t port)$/;"	f
conn_pool	conn_pool.c	/^static genpool_handler_t *conn_pool;$/;"	v	file:
conn_pool_destroy	conn_pool.c	/^int conn_pool_destroy( )$/;"	f
conn_pool_init	conn_pool.c	/^int conn_pool_init(size_t count)$/;"	f
conn_release	conn_pool.c	/^static int conn_release(conn_t *c)$/;"	f	file:
conn_state_set_idle	conn_pool.c	/^int conn_state_set_idle(conn_t *c)$/;"	f
conn_state_set_prepare_mysql	conn_pool.c	/^int conn_state_set_prepare_mysql(conn_t *c)$/;"	f
conn_state_set_read_mysql_write_client	conn_pool.c	/^int conn_state_set_read_mysql_write_client(conn_t *c)$/;"	f
conn_state_set_reading_client	conn_pool.c	/^int conn_state_set_reading_client(conn_t *c)$/;"	f
conn_state_set_writing_mysql	conn_pool.c	/^int conn_state_set_writing_mysql(conn_t *c)$/;"	f
conn_t	conn_pool.h	/^} conn_t;$/;"	t	typeref:struct:__anon7
connect_nonblock	oplib/src/sock.c	/^inline int connect_nonblock(const char *host, const char *serv, int *flag)$/;"	f
connid	conn_pool.c	/^static uint32_t connid;$/;"	v	file:
connid	conn_pool.h	/^    uint32_t connid;$/;"	m	struct:__anon7
container_of	oplib/include/list.h	221;"	d
count	oplib/include/md5.h	/^	uint32_t count[2];$/;"	m	struct:_md5ctx
ctx	my_pool.h	/^    my_ctx_t ctx;$/;"	m	struct:__anon2
cur_connecting_cnt	my_pool.h	/^	unsigned int cur_connecting_cnt ;\/\/当前正在连接这个数据库的连接数，在自动增加连接的时候需要判断这里，保证一次增加一个，避免瞬间错误的建立大量连接$/;"	m	struct:__anon4
curall_connection	my_pool.h	/^	int curall_connection ;\/\/当前的连接数，包括活的，死的$/;"	m	struct:__anon4
curdb	conn_pool.h	/^    char curdb[64];$/;"	m	struct:__anon7
curdb	my_pool.h	/^    char curdb[64];$/;"	m	struct:__anon1
daemon	my_conf.h	/^    int daemon;$/;"	m	struct:conf_t
db	my_protocol.h	/^    char db[128];$/;"	m	struct:__anon10
dead_head	my_pool.h	/^    struct list_head dead_head;$/;"	m	struct:__anon4	typeref:struct:__anon4::list_head
debug	oplib/include/log.h	39;"	d
del_handler	oplib/src/handler.c	/^int del_handler(int fd)$/;"	f
dict	oplib/include/dict.h	/^typedef struct dict{$/;"	s
dict	oplib/src/conf.c	/^static dict_t *dict;$/;"	v	file:
dict_clear	oplib/src/dict.c	/^int dict_clear(dict_t *op)$/;"	f
dict_init	oplib/src/dict.c	/^dict_t *dict_init(unsigned long size)$/;"	f
dict_insert	oplib/src/dict.c	/^void *dict_insert(dict_t *op, void *var, void *value)$/;"	f
dict_search	oplib/src/dict.c	/^void *dict_search(dict_t *op, void *var)$/;"	f
dict_setcmp	oplib/src/dict.c	/^int dict_setcmp(dict_t *op, int (*cmp)(void *, void *))$/;"	f
dict_setsign	oplib/src/dict.c	/^int dict_setsign(dict_t *op, unsigned long (*sign)(void *))$/;"	f
dict_t	oplib/include/dict.h	/^} dict_t;$/;"	t	typeref:struct:dict
dirty	my_pool.h	/^    uint8_t dirty;$/;"	m	struct:__anon1
ditem	oplib/include/dict.h	/^typedef struct ditem{$/;"	s
ditem_t	oplib/include/dict.h	/^} ditem_t;$/;"	t	typeref:struct:ditem
enum_cursor_type	mysql_com.h	/^enum enum_cursor_type$/;"	g
enum_field_types	mysql_com.h	/^enum enum_field_types { MYSQL_TYPE_DECIMAL, MYSQL_TYPE_TINY,$/;"	g
enum_mysql_set_option	mysql_com.h	/^enum enum_mysql_set_option$/;"	g
enum_server_command	mysql_com.h	/^enum enum_server_command$/;"	g
epfd	oplib/src/handler.c	/^static int epfd;$/;"	v	file:
epoll_handler	oplib/src/handler.c	/^int epoll_handler(int timeout)$/;"	f
err	my_protocol.h	/^    uint16_t err;$/;"	m	struct:__anon11
err	my_protocol.h	/^    uint16_t err;$/;"	m	struct:__anon13
errmsg	my_protocol.h	/^    char errmsg[128];$/;"	m	struct:__anon11
fail_head	my_pool.h	/^    struct list_head fail_head;$/;"	m	struct:__anon4	typeref:struct:__anon4::list_head
fd	cli_pool.h	/^    int fd;$/;"	m	struct:__anon8
fd	my_pool.h	/^    int fd;\/\/mysql连接对应的tcp socket fd$/;"	m	struct:__anon2
fd	oplib/include/log.h	/^    int fd;$/;"	m	struct:_log_t
fd	oplib/src/handler.c	/^    int fd;$/;"	m	struct:__anon18	file:
fd_is_legal	oplib/include/handler.h	21;"	d
field_count	my_protocol.h	/^    uint8_t field_count;$/;"	m	struct:__anon13
fname	oplib/include/log.h	/^    char *fname;$/;"	m	struct:_log_t
free_chunks	oplib/include/genpool.h	/^    uint32_t free_chunks ;$/;"	m	struct:_genpool_handler_t
free_chunks_head	oplib/include/genpool.h	/^    struct list_head free_chunks_head;$/;"	m	struct:_genpool_handler_t	typeref:struct:_genpool_handler_t::list_head
free_pages_head	oplib/src/genpool.c	/^    struct list_head free_pages_head;$/;"	m	struct:__anon16	typeref:struct:__anon16::list_head	file:
full_chunks_head	oplib/include/genpool.h	/^    struct list_head full_chunks_head;$/;"	m	struct:_genpool_handler_t	typeref:struct:_genpool_handler_t::list_head
func	oplib/src/timer.c	/^    timer_func_t func;$/;"	m	struct:timer_func_map	file:
func_map	oplib/src/timer.c	/^static struct timer_func_map func_map[MAX_FUNC_MAP];$/;"	v	typeref:struct:timer_func_map	file:
func_map_index	oplib/src/timer.c	/^static int func_map_index;$/;"	v	file:
g_conf	my_conf.c	/^struct conf_t g_conf;$/;"	v	typeref:struct:conf_t
g_cursecond	main.c	/^int g_cursecond = 0 ;\/\/用来缓存time(null)的结果，避免大量调用time()$/;"	v
g_log	main.c	/^log_t *g_log = NULL;$/;"	v
g_logid	oplib/src/log.c	/^unsigned long g_logid = 0 ;$/;"	v
g_run	main.c	/^int g_run ;$/;"	v
g_usr1_reload	main.c	/^int g_usr1_reload = 0;$/;"	v
genpool_alloc_page	oplib/src/genpool.c	/^inline void *genpool_alloc_page(genpool_handler_t *g)$/;"	f
genpool_destroy	oplib/src/genpool.c	/^void genpool_destroy( genpool_handler_t *gpool){$/;"	f
genpool_handler_t	oplib/include/genpool.h	/^} genpool_handler_t;$/;"	t	typeref:struct:_genpool_handler_t
genpool_init	oplib/src/genpool.c	/^genpool_handler_t *genpool_init(size_t size, size_t max)$/;"	f
genpool_release_page	oplib/src/genpool.c	/^inline int genpool_release_page(genpool_handler_t *g, void *mem)$/;"	f
genpool_status	oplib/src/genpool.c	/^int genpool_status(genpool_handler_t *g, char *buf, size_t len)$/;"	f
get_conf_int	oplib/src/conf.c	/^int get_conf_int(const char *str, int def)$/;"	f
get_conf_str	oplib/src/conf.c	/^char *get_conf_str(const char *str, const char *def)$/;"	f
getkey	oplib/src/dict.c	/^static unsigned long getkey(dict_t *op, void *var)$/;"	f	file:
getsum	oplib/src/dict.c	/^static unsigned long getsum(void *var)$/;"	f	file:
handle_sigint	main.c	/^void handle_sigint(int signal) {$/;"	f
handler	my_pool.c	/^static genpool_handler_t *handler;\/\/mysql 的连接池，在my_pool_init分配$/;"	v	file:
handler_callback_t	oplib/src/handler.c	/^} handler_callback_t;$/;"	t	typeref:struct:__anon18	file:
hccount	oplib/src/handler.c	/^static int hccount = 0;$/;"	v	file:
hcptr	oplib/src/handler.c	/^static handler_callback_t *hcptr = NULL;$/;"	v	file:
head_array	oplib/include/dict.h	/^    struct list_head *head_array;$/;"	m	struct:dict	typeref:struct:dict::list_head
host	my_conf.h	/^    char host[64];$/;"	m	struct:__anon19
host	my_pool.h	/^    char host[MAX_HOST_LEN];$/;"	m	struct:__anon4
idle_head	conn_pool.c	/^static struct list_head idle_head;\/\/接到一个客户端 连接后，将其放到这里$/;"	v	typeref:struct:list_head	file:
idle_timeout	my_conf.h	/^    int idle_timeout;$/;"	m	struct:conf_t
idle_timeout_timer	conn_pool.c	/^static int idle_timeout_timer(unsigned long arg)$/;"	f	file:
in_handler	oplib/src/handler.c	/^int in_handler(int fd)$/;"	f
info	my_pool.h	/^    my_info_t *info;$/;"	m	struct:__anon4
info	oplib/include/log.h	40;"	d
info	oplib/src/timer.c	/^    char *info;$/;"	m	struct:timer_func_map	file:
init_handler	oplib/src/handler.c	/^int init_handler(int count)$/;"	f
inited	oplib/src/conf.c	/^static int inited;$/;"	v	file:
interval	oplib/src/timer.c	/^    int interval;$/;"	m	struct:timer_func_map	file:
ip	cli_pool.h	/^    uint32_t ip;$/;"	m	struct:__anon8
ip	my_conf.h	/^    char *ip;$/;"	m	struct:conf_t
ip_to_string	oplib/src/sock.c	/^char* ip_to_string(uint32_t ip)$/;"	f
ipaddr_bsearch	oplib/src/iprange.c	/^static int ipaddr_bsearch(ipblock *base, size_t nelem, uint32_t addr)$/;"	f	file:
ipaddr_e	oplib/include/iprange.h	/^    uint32_t ipaddr_e;$/;"	m	struct:_ipblock
ipaddr_in_range	oplib/src/iprange.c	/^int ipaddr_in_range(iprange_t *handler, uint32_t addr)$/;"	f
ipaddr_s	oplib/include/iprange.h	/^    uint32_t ipaddr_s;$/;"	m	struct:_ipblock
ipblock	oplib/include/iprange.h	/^}ipblock;$/;"	t	typeref:struct:_ipblock
ipint2str	oplib/src/common.c	/^int ipint2str(char *ipstr, size_t n, uint32_t ip)$/;"	f
iprange_dump	oplib/src/iprange.c	/^int iprange_dump(iprange_t *handler)$/;"	f
iprange_init	oplib/src/iprange.c	/^iprange_t *iprange_init(const char *filename, int max)$/;"	f
iprange_parse	oplib/src/iprange.c	/^static int iprange_parse(iprange_t *handler, const char *filename)$/;"	f	file:
iprange_release	oplib/src/iprange.c	/^int iprange_release(iprange_t *handler)$/;"	f
iprange_reload	oplib/src/iprange.c	/^iprange_t *iprange_reload(iprange_t *handler, const char *filename, int max)$/;"	f
iprange_sort	oplib/src/iprange.c	/^static int iprange_sort(iprange_t *handler)$/;"	f	file:
iprange_t	oplib/include/iprange.h	/^} iprange_t;$/;"	t	typeref:struct:_iprange_t
iprange_unique	oplib/src/iprange.c	/^static int iprange_unique(iprange_t *handler)$/;"	f	file:
ipstr2int	oplib/src/common.c	/^int ipstr2int(uint32_t *ip, const char *ipstr)$/;"	f
lang	my_pool.h	/^    uint8_t lang;$/;"	m	struct:__anon3
lang	my_protocol.h	/^    uint8_t lang;$/;"	m	struct:__anon9
lasttime	oplib/src/timer.c	/^    time_t lasttime;$/;"	m	struct:timer_func_map	file:
lastused_time	my_pool.h	/^    time_t lastused_time;\/\/这个连接的上次交互使用时间，是说被客户端使用哈$/;"	m	struct:__anon2
len	my_protocol.h	/^    uint32_t len;$/;"	m	struct:__anon12
level	oplib/include/log.h	/^    int level;$/;"	m	struct:_log_t
link	cli_pool.h	/^    struct list_head link;$/;"	m	struct:__anon8	typeref:struct:__anon8::list_head
link	conn_pool.h	/^    struct list_head link;$/;"	m	struct:__anon7	typeref:struct:__anon7::list_head
link	my_pool.h	/^    struct list_head link;$/;"	m	struct:__anon2	typeref:struct:__anon2::list_head
link	oplib/include/dict.h	/^    struct list_head link;$/;"	m	struct:ditem	typeref:struct:ditem::list_head
link	oplib/src/genpool.c	/^    struct list_head link;$/;"	m	struct:__anon16	typeref:struct:__anon16::list_head	file:
link	oplib/src/genpool.c	/^    struct list_head link;$/;"	m	struct:__anon17	typeref:struct:__anon17::list_head	file:
list_add	oplib/include/list.h	/^static inline void list_add(struct list_head *new, struct list_head *head)$/;"	f
list_add_tail	oplib/include/list.h	/^static inline void list_add_tail(struct list_head *new, struct list_head *head)$/;"	f
list_del	oplib/include/list.h	/^static inline void list_del(struct list_head *entry)$/;"	f
list_del_init	oplib/include/list.h	/^static inline void list_del_init(struct list_head *entry)$/;"	f
list_empty	oplib/include/list.h	/^static inline int list_empty(const struct list_head *head)$/;"	f
list_entry	oplib/include/list.h	224;"	d
list_first_entry	oplib/include/list.h	235;"	d
list_for_each	oplib/include/list.h	243;"	d
list_for_each_safe	oplib/include/list.h	266;"	d
list_head	oplib/include/list.h	/^struct list_head {$/;"	s
list_is_last	oplib/include/list.h	/^static inline int list_is_last(const struct list_head *list,$/;"	f
list_move	oplib/include/list.h	/^static inline void list_move(struct list_head *list, struct list_head *head)$/;"	f
list_move_tail	oplib/include/list.h	/^static inline void list_move_tail(struct list_head *list,$/;"	f
list_replace	oplib/include/list.h	/^static inline void list_replace(struct list_head *old,$/;"	f
list_replace_init	oplib/include/list.h	/^static inline void list_replace_init(struct list_head *old,$/;"	f
list_splice	oplib/include/list.h	/^static inline void list_splice(struct list_head *list, struct list_head *head)$/;"	f
list_splice_init	oplib/include/list.h	/^static inline void list_splice_init(struct list_head *list,$/;"	f
lock	oplib/include/log.h	/^    pthread_mutex_t lock;$/;"	m	struct:_log_t
log	my_conf.h	/^    char *log;$/;"	m	struct:conf_t
log	oplib/include/log.h	36;"	d
log_deinit	oplib/src/log.c	/^int log_deinit(log_t *log)$/;"	f
log_doit	oplib/src/log.c	/^static int log_doit(log_t *log, int level, int flag, const char *file, int line, \\$/;"	f	file:
log_err	oplib/include/log.h	37;"	d
log_init	oplib/src/log.c	/^log_t *log_init(const char *fname, int level)$/;"	f
log_inited	oplib/src/log.c	/^static int log_inited = 0;$/;"	v	file:
log_ret	oplib/src/log.c	/^int log_ret(log_t *log, int level, int flag, const char *file, int line, const char *func, const char *fmt,...)$/;"	f
log_strerr	oplib/include/log.h	38;"	d
log_t	oplib/include/log.h	/^} log_t;$/;"	t	typeref:struct:_log_t
loglevel	my_conf.h	/^    char *loglevel;$/;"	m	struct:conf_t
magicnum	oplib/src/genpool.c	/^    unsigned long magicnum;$/;"	m	struct:__anon17	file:
main	main.c	/^int main(int argc, char *argv[])$/;"	f
make_auth_result	my_protocol.c	/^int make_auth_result(buf_t *buf, my_auth_result_t *result)$/;"	f
make_com	my_protocol.c	/^int make_com(buf_t *buf, cli_com_t *com)$/;"	f
make_init	my_protocol.c	/^int make_init(buf_t *buf, my_auth_init_t *init)$/;"	f
make_listen_nonblock	oplib/src/sock.c	/^inline int make_listen_nonblock(const char *host, const char *serv)$/;"	f
make_login	my_protocol.c	/^int make_login(buf_t *buf, cli_auth_login_t *login)$/;"	f
make_my_conn	my_pool.c	/^static int make_my_conn(my_conn_t *my)$/;"	f	file:
make_rand_scram	passwd.c	/^int make_rand_scram(char *scram, int len)$/;"	f
make_result_error	my_protocol.c	/^int make_result_error(buf_t *buf, my_result_error_t *result)$/;"	f
marker	my_protocol.h	/^    uint8_t marker;$/;"	m	struct:__anon13
max	oplib/include/iprange.h	/^    int max, num;$/;"	m	struct:_iprange_t
max_connection	my_pool.h	/^	int max_connection ;\/\/最大连接数$/;"	m	struct:__anon4
max_connections	my_conf.h	/^    int max_connections;$/;"	m	struct:conf_t
max_free_chunks	oplib/include/genpool.h	/^	uint32_t max_free_chunks;$/;"	m	struct:_genpool_handler_t
max_pkt_size	my_protocol.h	/^    uint32_t max_pkt_size;$/;"	m	struct:__anon10
max_total_chunks	oplib/include/genpool.h	/^	uint32_t max_total_chunks; \/\/一共需要多少个块$/;"	m	struct:_genpool_handler_t
maxnum	my_conf.h	/^    int  maxnum;\/\/连接的最大数目$/;"	m	struct:__anon19
md5_decode	oplib/src/md5.c	/^static void md5_decode (uint32_t *output,const uint8_t *input,uint32_t len) {$/;"	f	file:
md5_encode	oplib/src/md5.c	/^static void md5_encode (uint8_t *output,const uint32_t *input,uint32_t len) {$/;"	f	file:
md5_final	oplib/src/md5.c	/^void md5_final (uint8_t digest[16],md5ctx *ctx) {$/;"	f
md5_init	oplib/src/md5.c	/^void md5_init (md5ctx *ctx) {$/;"	f
md5_transform	oplib/src/md5.c	/^static void md5_transform (uint32_t state[4],const uint8_t block[64]) {$/;"	f	file:
md5_update	oplib/src/md5.c	/^void md5_update (md5ctx *ctx,const uint8_t *buff,uint32_t leng) {$/;"	f
md5ctx	oplib/include/md5.h	/^} md5ctx;$/;"	t	typeref:struct:_md5ctx
mem	my_buf.h	/^    char mem[PREALLOC_BUF_SIZE];$/;"	m	struct:buf_t
mem	oplib/src/genpool.c	/^    char mem[];$/;"	m	struct:__anon17	file:
min_connection	my_pool.h	/^	int min_connection ;\/\/初始申请的连接数目$/;"	m	struct:__anon4
mmhash64	oplib/src/hash.c	/^inline uint64_t mmhash64(const void *key, int len)$/;"	f
mod_handler	oplib/src/handler.c	/^int mod_handler(int fd, uint32_t event, void *cb, void *arg)$/;"	f
msg	my_protocol.h	/^    char msg[512];$/;"	m	struct:__anon13
my	conn_pool.h	/^    my_conn_t *my;\/\/对应的mysql连接是哪个 $/;"	m	struct:__anon7
my_answer_cb	my_ops.c	/^int my_answer_cb(int fd, void *arg)$/;"	f
my_auth_init_t	my_protocol.h	/^}my_auth_init_t;$/;"	t	typeref:struct:__anon9
my_auth_result_t	my_protocol.h	/^}my_auth_result_t;$/;"	t	typeref:struct:__anon11
my_conf_destroy	my_conf.c	/^int my_conf_destroy()$/;"	f
my_conf_init	my_conf.c	/^int my_conf_init(const char *log)$/;"	f
my_conf_t	my_conf.h	/^}my_conf_t;$/;"	t	typeref:struct:__anon20
my_conn_alloc	my_pool.c	/^static my_conn_t *my_conn_alloc(my_node_t *n)$/;"	f	file:
my_conn_close	my_pool.c	/^int my_conn_close(my_conn_t *my)$/;"	f
my_conn_close_and_release	my_pool.c	/^static int my_conn_close_and_release(my_conn_t *my)$/;"	f	file:
my_conn_close_on_fail	my_pool.c	/^int my_conn_close_on_fail(my_conn_t *my)$/;"	f
my_conn_ctx_is_dirty	my_pool.c	/^int my_conn_ctx_is_dirty(my_conn_t *my)$/;"	f
my_conn_ctx_set_dirty	my_pool.c	/^int my_conn_ctx_set_dirty(my_conn_t *my)$/;"	f
my_conn_dead_reconnect_timer	my_pool.c	/^static int my_conn_dead_reconnect_timer(unsigned long arg)$/;"	f	file:
my_conn_fail_reconnect_timer	my_pool.c	/^static int my_conn_fail_reconnect_timer(unsigned long arg)$/;"	f	file:
my_conn_init	my_pool.c	/^static int my_conn_init(my_conn_t *my, my_node_t *n)$/;"	f	file:
my_conn_pool_ping_timeout_timer	my_pool.c	/^static int my_conn_pool_ping_timeout_timer(unsigned long arg)$/;"	f	file:
my_conn_pool_ping_timer	my_pool.c	/^static int my_conn_pool_ping_timer(unsigned long arg)$/;"	f	file:
my_conn_pool_status_timer	my_pool.c	/^static int my_conn_pool_status_timer(unsigned long arg)$/;"	f	file:
my_conn_put	my_pool.c	/^int my_conn_put(my_conn_t *my, int isupdatestatustime )$/;"	f
my_conn_release	my_pool.c	/^static int my_conn_release(my_conn_t *my)$/;"	f	file:
my_conn_set_avail	my_pool.c	/^int my_conn_set_avail(my_conn_t *my, int isupdatestatustime )$/;"	f
my_conn_set_dead	my_pool.c	/^static int my_conn_set_dead(my_conn_t *my)$/;"	f	file:
my_conn_set_fail	my_pool.c	/^static int my_conn_set_fail(my_conn_t *my)$/;"	f	file:
my_conn_set_ping	my_pool.c	/^static int my_conn_set_ping(my_conn_t *my)$/;"	f	file:
my_conn_set_raw	my_pool.c	/^static int my_conn_set_raw(my_conn_t *my)$/;"	f	file:
my_conn_set_used	my_pool.c	/^static int my_conn_set_used(my_conn_t *my, void *ptr)$/;"	f	file:
my_conn_t	my_pool.h	/^} my_conn_t;$/;"	t	typeref:struct:__anon2
my_crypt	passwd.c	/^static void my_crypt(char *to, const char *s1, const char *s2, uint32_t len)$/;"	f	file:
my_ctx_init	my_pool.c	/^static int my_ctx_init(my_ctx_t *ctx)$/;"	f	file:
my_ctx_t	my_pool.h	/^} my_ctx_t;$/;"	t	typeref:struct:__anon1
my_hs_stage1_cb	my_ops.c	/^int my_hs_stage1_cb(int fd, void *arg)$/;"	f
my_hs_stage2_cb	my_ops.c	/^int my_hs_stage2_cb(int fd, void *arg)$/;"	f
my_hs_stage3_cb	my_ops.c	/^int my_hs_stage3_cb(int fd, void *arg)$/;"	f
my_info_set	my_pool.c	/^int my_info_set(uint8_t prot, uint8_t lang, uint16_t status, \\$/;"	f
my_info_t	my_pool.h	/^} my_info_t;$/;"	t	typeref:struct:__anon3
my_node_closing_cleanup	my_pool.c	/^static int my_node_closing_cleanup(my_node_t *node)$/;"	f	file:
my_node_closing_cleanup_timer	my_pool.c	/^static int my_node_closing_cleanup_timer(unsigned long arg)$/;"	f	file:
my_node_conf_t	my_conf.h	/^}my_node_conf_t;$/;"	t	typeref:struct:__anon19
my_node_init	my_pool.c	/^static int my_node_init(my_node_t *n)$/;"	f	file:
my_node_is_closing	my_pool.c	/^static int my_node_is_closing(my_node_t *node)$/;"	f	file:
my_node_set_closing	my_pool.c	/^static int my_node_set_closing(my_node_t *node)$/;"	f	file:
my_node_t	my_pool.h	/^} my_node_t;$/;"	t	typeref:struct:__anon4
my_ping_prepare	my_ops.c	/^int my_ping_prepare(my_conn_t *my)$/;"	f
my_ping_req_cb	my_ops.c	/^static int my_ping_req_cb(int fd, void *arg)$/;"	f	file:
my_ping_resp_cb	my_ops.c	/^static int my_ping_resp_cb(int fd, void *arg)$/;"	f	file:
my_pool_destroy	my_pool.c	/^int my_pool_destroy( )$/;"	f
my_pool_have_conn	my_pool.c	/^int my_pool_have_conn(void)$/;"	f
my_pool_init	my_pool.c	/^int my_pool_init(int count)$/;"	f
my_pool_t	my_pool.h	/^} my_pool_t;$/;"	t	typeref:struct:__anon5
my_query_cb	my_ops.c	/^int my_query_cb(int fd, void *arg)$/;"	f
my_real_read	my_ops.c	/^static int my_real_read(int fd, buf_t *buf, int *done)$/;"	f	file:
my_real_read_result_set	my_ops.c	/^static int my_real_read_result_set(int fd, buf_t *buf)$/;"	f	file:
my_real_write	my_ops.c	/^static int my_real_write(int fd, buf_t *buf, int *done)$/;"	f	file:
my_result_error_t	my_protocol.h	/^}my_result_error_t;$/;"	t	typeref:struct:__anon13
my_slave_conn_get	my_pool.c	/^my_conn_t *my_slave_conn_get(void *c, uint32_t ip, uint16_t port)$/;"	f
my_slave_reg	my_pool.c	/^int my_slave_reg(char *host, char *srv, char *user, char *pass, int mincount, int maxcount)$/;"	f
my_try_increase_connection	my_pool.c	/^int my_try_increase_connection( )$/;"	f
my_unreg	my_pool.c	/^int my_unreg(char *host, char *srv)$/;"	f
my_use_db_prepare	my_ops.c	/^static int my_use_db_prepare(conn_t *c)$/;"	f	file:
my_use_db_req_cb	my_ops.c	/^static int my_use_db_req_cb(int fd, void *arg)$/;"	f	file:
my_use_db_resp_cb	my_ops.c	/^static int my_use_db_resp_cb(int fd, void *arg)$/;"	f	file:
mycmp	oplib/src/iprange.c	/^static int mycmp(const void *arg1, const void *arg2)$/;"	f	file:
myconf_cur	work.c	/^static my_conf_t myconf_cur, myconf_new;$/;"	v	file:
myconf_new	work.c	/^static my_conf_t myconf_cur, myconf_new;$/;"	v	file:
myinfo	my_pool.c	/^static my_info_t myinfo;$/;"	v	file:
mypool	my_pool.c	/^static my_pool_t *mypool;$/;"	v	file:
mysql_conf	my_conf.h	/^    char *mysql_conf;$/;"	m	struct:conf_t
mysql_conf_parse	my_conf.c	/^int mysql_conf_parse(const char *conf, my_conf_t *myconf)$/;"	f
mysql_enum_shutdown_level	mysql_com.h	/^enum mysql_enum_shutdown_level {$/;"	g
mysql_ping_timeout	my_conf.h	/^    int mysql_ping_timeout;$/;"	m	struct:conf_t
mysql_sha1_input	sha1.c	/^int mysql_sha1_input(SHA1_CONTEXT *context, const uint8_t *message_array,$/;"	f
mysql_sha1_reset	sha1.c	/^int mysql_sha1_reset(SHA1_CONTEXT *context)$/;"	f
mysql_sha1_result	sha1.c	/^int mysql_sha1_result(SHA1_CONTEXT *context,$/;"	f
naivehash64	oplib/src/hash.c	/^inline uint64_t naivehash64(const void *key, int len)$/;"	f
net_new_transaction	mysql_com.h	351;"	d
next	oplib/include/list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
node	my_pool.h	/^    void *node;\/\/这个mysql连接所属的机器节点是哪个$/;"	m	struct:__anon2
num	oplib/include/iprange.h	/^    int max, num;$/;"	m	struct:_iprange_t
offsetof	oplib/include/list.h	219;"	d
packet_error	mysql_com.h	246;"	d
padding	oplib/src/md5.c	/^static const uint8_t padding[64] = {$/;"	v	file:
page_size	oplib/include/genpool.h	/^    uint32_t page_size; \/\/一个元素的大小 $/;"	m	struct:_genpool_handler_t
page_t	oplib/src/genpool.c	/^} page_t;$/;"	t	typeref:struct:__anon17	file:
pages_per_chunk	oplib/include/genpool.h	/^	uint32_t pages_per_chunk;\/\/预定义的每个块包含多少个pages， 默认为64个pages$/;"	m	struct:_genpool_handler_t
parse_auth_result	my_protocol.c	/^int parse_auth_result(buf_t *buf, my_auth_result_t *result)$/;"	f
parse_com	my_protocol.c	/^int parse_com(buf_t *buf, cli_com_t *com)$/;"	f
parse_init	my_protocol.c	/^int parse_init(buf_t *buf, my_auth_init_t *init)$/;"	f
parse_login	my_protocol.c	/^int parse_login(buf_t *buf, cli_auth_login_t *login)$/;"	f
parse_req_sql	sqldump.c	/^static int parse_req_sql(conn_t *c, char *buf, int len)$/;"	f	file:
pass	my_conf.h	/^    char pass[64];$/;"	m	struct:__anon19
pass	my_pool.h	/^    char pass[MAX_PASS_LEN];$/;"	m	struct:__anon4
passtype	my_protocol.h	/^    char passtype[128];$/;"	m	struct:__anon10
passwd	my_conf.h	/^    char *passwd;$/;"	m	struct:conf_t
ping_head	my_pool.h	/^    struct list_head ping_head;$/;"	m	struct:__anon4	typeref:struct:__anon4::list_head
pktlen	my_protocol.h	/^    uint32_t pktlen;$/;"	m	struct:__anon10
pktlen	my_protocol.h	/^    uint32_t pktlen;$/;"	m	struct:__anon11
pktlen	my_protocol.h	/^    uint32_t pktlen;$/;"	m	struct:__anon12
pktlen	my_protocol.h	/^    uint32_t pktlen;$/;"	m	struct:__anon13
pktlen	my_protocol.h	/^    uint32_t pktlen;$/;"	m	struct:__anon9
pktno	my_protocol.h	/^    uint8_t pktno;$/;"	m	struct:__anon10
pktno	my_protocol.h	/^    uint8_t pktno;$/;"	m	struct:__anon11
pktno	my_protocol.h	/^    uint8_t pktno;$/;"	m	struct:__anon12
pktno	my_protocol.h	/^    uint8_t pktno;$/;"	m	struct:__anon13
pktno	my_protocol.h	/^    uint8_t pktno;$/;"	m	struct:__anon9
plug	my_protocol.h	/^    char plug[64];$/;"	m	struct:__anon9
port	cli_pool.h	/^    uint16_t port;$/;"	m	struct:__anon8
port	my_conf.h	/^    char *port;$/;"	m	struct:conf_t
port	my_conf.h	/^    char port[16];$/;"	m	struct:__anon19
pos	my_buf.h	/^    size_t pos;$/;"	m	struct:buf_t
prealloc_chunks	oplib/include/genpool.h	/^    uint32_t prealloc_chunks;$/;"	m	struct:_genpool_handler_t
prepare_mysql_head	conn_pool.c	/^static struct list_head prepare_mysql_head;$/;"	v	typeref:struct:list_head	file:
prepare_mysql_timeout	my_conf.h	/^    int prepare_mysql_timeout;$/;"	m	struct:conf_t
prepare_mysql_timeout_timer	conn_pool.c	/^static int prepare_mysql_timeout_timer(unsigned long arg)$/;"	f	file:
prev	oplib/include/list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::
prot_ver	my_protocol.h	/^    uint8_t prot_ver;$/;"	m	struct:__anon9
protocol	my_pool.h	/^    uint8_t protocol;$/;"	m	struct:__anon3
ptr	my_buf.h	/^    char *ptr;$/;"	m	struct:buf_t
raw_head	my_pool.h	/^    struct list_head raw_head;$/;"	m	struct:__anon4	typeref:struct:__anon4::list_head
read_client_head	conn_pool.c	/^static struct list_head read_client_head;$/;"	v	typeref:struct:list_head	file:
read_client_timeout	my_conf.h	/^    int read_client_timeout;$/;"	m	struct:conf_t
read_client_timeout_timer	conn_pool.c	/^static int read_client_timeout_timer(unsigned long arg)$/;"	f	file:
read_mysql_write_client_head	conn_pool.c	/^static struct list_head read_mysql_write_client_head;$/;"	v	typeref:struct:list_head	file:
read_mysql_write_client_timeout	my_conf.h	/^    int read_mysql_write_client_timeout;$/;"	m	struct:conf_t
read_mysql_write_client_timeout_timer	conn_pool.c	/^static int read_mysql_write_client_timeout_timer(unsigned long arg)$/;"	f	file:
reloc	my_buf.h	/^    int reloc;$/;"	m	struct:buf_t
result	my_protocol.h	/^    uint8_t result;$/;"	m	struct:__anon11
role	my_pool.h	/^	int role ;$/;"	m	struct:__anon4
scount	my_conf.h	/^    int scount;$/;"	m	struct:__anon20
scram	cli_pool.h	/^    char scram[SCRAMBLE_LENGTH + 1];$/;"	m	struct:__anon8
scram	my_protocol.h	/^    char scram[128];$/;"	m	struct:__anon10
scram	my_protocol.h	/^    char scram[64];$/;"	m	struct:__anon9
scram_len	my_protocol.h	/^    uint8_t scram_len;$/;"	m	struct:__anon9
scramble	passwd.c	/^void scramble(char *to, const char *message, const char *password)$/;"	f
setnamesql	my_pool.h	/^    char setnamesql[64];\/\/客户端发送过来的SET NAMES utf8 指令，为了避免多次发送，进行缓存$/;"	m	struct:__anon2
setnonblock	oplib/src/sock.c	/^inline int setnonblock(int fd)$/;"	f
sha_const_key	sha1.c	/^const uint32_t sha_const_key[5]=$/;"	v
sha_result_codes	sha1.h	/^enum sha_result_codes$/;"	g
sign	oplib/include/dict.h	/^    unsigned long   (*sign)(void *);$/;"	m	struct:dict
signal_init	main.c	/^static int signal_init(void)$/;"	f	file:
signal_usr1	main.c	/^static void signal_usr1(int signal)$/;"	f	file:
size	my_buf.h	/^    size_t size;$/;"	m	struct:buf_t
slave	my_conf.h	/^    my_node_conf_t slave[64];\/\/slave的机器数目$/;"	m	struct:__anon20
slave	my_pool.h	/^    my_node_t slave[MAX_SLAVE_NODE];$/;"	m	struct:__anon5
slave_num	my_pool.h	/^    int slave_num;$/;"	m	struct:__anon5
sql_count	sqldump.c	/^static int sql_count = 0;$/;"	v	file:
sql_fd	sqldump.c	/^static int sql_fd = -1;$/;"	v	file:
sqldump	sqldump.c	/^int sqldump(conn_t *c)$/;"	f
sqldump_close	sqldump.c	/^int sqldump_close(void)$/;"	f
sqldump_fname	sqldump.c	/^static char sqldump_fname[1024] = ".\/sql.log";$/;"	v	file:
sqldump_init	sqldump.c	/^int sqldump_init(const char *fname)$/;"	f
sqllog	my_conf.h	/^    char *sqllog;$/;"	m	struct:conf_t
sqlstate	my_protocol.h	/^    char sqlstate[5];$/;"	m	struct:__anon13
srv	my_pool.h	/^    char srv[MAX_SRV_LEN];\/\/这是端口····这名字 $/;"	m	struct:__anon4
srv_ver	my_protocol.h	/^    char srv_ver[64];$/;"	m	struct:__anon9
statbuf	oplib/include/log.h	/^    struct stat statbuf;$/;"	m	struct:_log_t	typeref:struct:_log_t::stat
state	conn_pool.h	/^    int state;$/;"	m	struct:__anon7
state	oplib/include/md5.h	/^	uint32_t state[4];$/;"	m	struct:_md5ctx
state_time	conn_pool.h	/^    time_t state_time;$/;"	m	struct:__anon7
state_time	my_pool.h	/^    time_t state_time;$/;"	m	struct:__anon2
status	my_pool.h	/^    uint16_t status;$/;"	m	struct:__anon3
status	my_protocol.h	/^    uint16_t status;$/;"	m	struct:__anon9
tid	my_protocol.h	/^    uint32_t tid;$/;"	m	struct:__anon9
timer	oplib/src/timer.c	/^int timer(void)$/;"	f
timer_func_map	oplib/src/timer.c	/^struct timer_func_map{$/;"	s	file:
timer_func_t	oplib/include/timer.h	/^typedef int (*timer_func_t)(unsigned long arg);$/;"	t
timer_init	oplib/src/timer.c	/^int timer_init(void)$/;"	f
timer_register	oplib/src/timer.c	/^int timer_register(timer_func_t func, unsigned long arg, char *info, int interval)$/;"	f
total_chunks	oplib/include/genpool.h	/^    uint32_t total_chunks;$/;"	m	struct:_genpool_handler_t
trim	oplib/src/common.c	/^int trim(char *buf)$/;"	f
tv_end	conn_pool.h	/^    struct timeval tv_end;$/;"	m	struct:__anon7	typeref:struct:__anon7::timeval
tv_start	conn_pool.h	/^    struct timeval tv_start;$/;"	m	struct:__anon7	typeref:struct:__anon7::timeval
update_time	my_pool.h	/^    time_t update_time;$/;"	m	struct:__anon3
used	my_buf.h	/^    size_t used;$/;"	m	struct:buf_t
used_chunks_head	oplib/include/genpool.h	/^    struct list_head used_chunks_head;$/;"	m	struct:_genpool_handler_t	typeref:struct:_genpool_handler_t::list_head
used_head	my_pool.h	/^    struct list_head used_head;\/\/已经分配给某个客户端的mysql连接list$/;"	m	struct:__anon4	typeref:struct:__anon4::list_head
used_pages_head	oplib/src/genpool.c	/^    struct list_head used_pages_head;$/;"	m	struct:__anon16	typeref:struct:__anon16::list_head	file:
user	my_conf.h	/^    char *user;$/;"	m	struct:conf_t
user	my_conf.h	/^    char user[16];$/;"	m	struct:__anon19
user	my_pool.h	/^    char user[MAX_USER_LEN];$/;"	m	struct:__anon4
user	my_protocol.h	/^    char user[128];$/;"	m	struct:__anon10
usr1_reload	work.c	/^static int usr1_reload(void)$/;"	f	file:
value	oplib/include/dict.h	/^    void    *value;$/;"	m	struct:ditem
var	oplib/include/dict.h	/^    void    *var;$/;"	m	struct:ditem
ver	my_pool.h	/^    char ver[64];$/;"	m	struct:__anon3
work	work.c	/^int work(int fd)$/;"	f
worker	my_conf.h	/^    int worker;$/;"	m	struct:conf_t
write_mysql_head	conn_pool.c	/^static struct list_head write_mysql_head;$/;"	v	typeref:struct:list_head	file:
write_mysql_timeout	my_conf.h	/^    int write_mysql_timeout;$/;"	m	struct:conf_t
write_mysql_timeout_timer	conn_pool.c	/^static int write_mysql_timeout_timer(unsigned long arg)$/;"	f	file:
